#!/usr/local/bin/python3

import sys
import asyncio
import aiodns
import aiorwlock
import logging
import re
import dns
import dns.message
import dns.rdata
import dns.rdataclass
import dns.rdatatype
import datetime
import socket
import xml.etree.ElementTree


class FileProperty:
    def __init__(self, path="",
                 is_meta=False, meta_name="", is_bigbuck=False,
                 is_chunk=False, rate="", seg="", frag=""):
        self.path = path
        self.is_meta, self.meta_name, self.is_bigbuck = is_meta, meta_name, is_bigbuck
        self.is_chunk, self.rate, self.seg, self.frag = is_chunk, rate, seg, frag


logging.basicConfig(level=logging.DEBUG)

if len(sys.argv) != 7 and len(sys.argv) != 8:
    print('Usage: ', sys.argv[0], ' <log> <alpha> <listen-port> <fake-ip> <dns-ip> <dns-port> [<www-ip>].')
    sys.exit(1)

# set logger files
logfile = logging.FileHandler(sys.argv[1])
logfile.setLevel(logging.CRITICAL)
logging.getLogger('').addHandler(logfile)

config = dict()

# set update-alpha for EWMA esitmate
config['update_alpha'] = float(sys.argv[2])

# set listen-port
config['listen_port'] = sys.argv[3]
config['listen_addr'] = "0.0.0.0"

# set fake-ip
config['fake_ip'] = sys.argv[4]

# set dns
config['dns_ip'] = sys.argv[5]
config['dns_port'] = sys.argv[6]

loop = asyncio.get_event_loop()
rwlock = aiorwlock.RWLock(loop=loop)
rates = list()
throughput_map = dict()
alpha = config['update_alpha']

# set optional content server
if len(sys.argv) == 8:
    config['www_ip'] = sys.argv[7]


async def forwarding(breader, bwriter):
    data = await breader.read(2000000)
    request_message = data.decode()

    logging.debug("Receiving {} data from browser".format(len(data)))
    if '\r\n' in request_message:
        request, rest = request_message.split('\r\n', 1)
    else:
        request = request_message
        rest = ''
    header_map = {}
    content = ''
    headers = ''
    host = None
    if len(rest) > 0:
        headers, content = rest.split('\r\n\r\n', 1)
        header_fields = headers.split('\r\n')
        for field in header_fields:
            key, value = field.split(':', 1)
            header_map[key] = value.strip().rstrip()
        if "Host" in header_map:
            host = header_map["Host"]

    try:
        method, url, version = request.split()
    except Exception as _:
        logging.error("Invalid request line")
        return
    remote_addr, remote_port, uri, file_property, chosen_rate = await modify_url(url, host)
    logging.debug("check request property".format(file_property))

    new_request = method + ' ' + uri + ' ' + version
    new_request += '\r\n'
    new_request += headers
    new_request += 'Connection: close'   # inform the server to close immediately
    new_request += '\r\n\r\n'
    new_request += content

    sreader, swriter = await asyncio.open_connection(remote_addr, int(remote_port), loop=loop)
    logging.debug("Sending request of {} to server {}:{}".format(uri, remote_addr, remote_port))
    start_time = datetime.datetime.now()
    swriter.write(new_request.encode())
    data = await sreader.read(2000000)
    logging.debug("{} bytes data received from server".format(len(data)))

    response = data.decode()
    response_line, _ = response.split('\r\n', 1)
    finish_time = datetime.datetime.now()
    header, content = response.split('\r\n\r\n', 1)
    logging.debug("Receiving response of {} from server {}:{}".format(response_line, remote_addr, remote_port))

    bwriter.write(data)
    await bwriter.drain()
    logging.debug("{} bytes data sent to browser".format(len(data)))

    # close both sockets
    swriter.close()
    bwriter.close()

    # stat chunk fetching
    if file_property.is_chunk:
        now = finish_time - datetime.datetime(year=1970, month=1, day=1, tzinfo=datetime.timezone.utc)
        duration = finish_time - start_time
        size = len(content)
        # size in bytes, duration in sec
        cur_throughput = size * 8 / 1000 / duration.total_seconds()
        new_throughout = await update_throughput(cur_throughput, remote_addr)
        # logging
        logging.critical("{} {} {} {} {} {} {}".format(now.total_seconds(),
                                                       duration.total_seconds(),
                                                       cur_throughput,
                                                       new_throughout,
                                                       chosen_rate,
                                                       remote_addr,
                                                       uri))
    # fetching metafile
    if file_property.is_bigbuck:
        sreader, swriter = await asyncio.open_connection(remote_addr, int(remote_port), loop=loop)
        uri = file_property.path + "big_buck_bunny.f4m"
        new_request = method + ' ' + uri + ' ' + version + '\r\n\r\n'
        swriter.write(new_request.encode())
        data = await sreader.read(2000000)
        response = data.decode()
        _, xml_str = response.split('\r\n\r\n', 1)
        parse_bitrates(xml_str)
        swriter.close()

    # close sockets
    logging.debug("Remote socket and Client socket closed")


async def modify_url(url, host):
    logging.debug("modifying host {} and url: {}".format(host, url))
    # parse out server_name, port and uri
    server_name = "video.pku.edu.cn"
    server_port = "8080"

    r_http = re.compile("(http://(.*?)(:(\\d+))?)?(/.*)")
    m_http = r_http.match(url)
    if m_http:
        if m_http.group(1):
            server_name = m_http.group(2)
            if m_http.group(3):
                server_port = m_http.group(4)
        uri = m_http.group(5)
    else:
        if host:
            server_name = host
        # reverse proxy
        uri = url

    # find specific requests related to video files
    file_property = FileProperty()
    if server_name == "video.pku.edu.cn":
        r_uri = re.compile("(.*?)((([^/]*)\\.f4m)|((\\d+)Seg(\\d+)-Frag(\\d+)))")
        m_uri = r_uri.match(uri)
        if m_uri:
            file_property.path = m_uri.group(1)
            if m_uri.group(2) != '':
                if m_uri.group(3) != '':
                    file_property.is_meta = True
                    file_property.meta_name = m_uri.group(3)
                    if file_property.meta_name == "big_buck_bunny.f4m":
                        file_property.is_bigbuck = True
            elif m_uri.group(5) != "":
                file_property.is_chunk = True
                file_property.rate = m_uri.group(6)
                file_property.seg = m_uri.group(7)
                file_property.frag = m_uri.group(8)
            else:
                logging.debug("Error in parsing uri: {}".format(uri))
                return None

    # get server address (Dangerous: using blocking queries)
    if server_name == "video.pku.edu.cn":
        if 'www_ip' in config:
            server_addr = config['www_ip']
        else:
            server_addr = query_name("video.pku.edu.cn")
    else:
        resolver = aiodns.DNSResolver(loop=loop)
        try:
            result = await resolver.query(server_name, 'A')
            # just choose the first result
            server_addr = result[0].host
        except Exception as e:
            logging.error("Error when resolving: {}".format(e))
            return None

    # modify request uri
    new_uri = uri
    rate = None
    if file_property.is_meta:
        if file_property.is_bigbuck:
            new_uri = file_property.path + "big_buck_bunny_nolist.f4m"
        else:
            new_uri = file_property.path + file_property.meta_name
    elif file_property.is_chunk:
        rate = adapt_bitrate(server_addr)
        if rate is None:
            rate = int(file_property.rate)
        new_uri = file_property.path + str(rate) + 'Seg' + file_property.seg + '-Frag' + file_property.frag

    return server_addr, server_port, new_uri, file_property, rate


def query_name(name):
    qname = dns.name.from_text(name)
    dns_request = dns.message.make_query(qname, rdtype=dns.rdatatype.A, rdclass=dns.rdataclass.IN)

    # Dangerous: using blocking I/O
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((config['fake_ip'], 0))
    dns_server = (config['dns_ip'], int(config['dns_port']))
    sock.sendto(dns_request.to_wire(), dns_server)
    data = sock.recv(1024)

    dns_response = dns.message.from_wire(data)
    ans_ipset = dns_response.get_rrset(dns_response.answer,
                                       dns.name.from_text('video.pku.edu.cn'),
                                       rdtype=dns.rdatatype.A,
                                       rdclass=dns.rdataclass.IN)
    if ans_ipset:
        for ans_ip in ans_ipset:
            return str(ans_ip)
    else:
        logging.error("Name query gets no answer")
        return None


async def adapt_bitrate(ip):
    logging.debug("Adapt bitrate: waiting for readlock")
    async with rwlock.reader:
        if ip in throughput_map:
            cur_throughput = throughput_map[ip]
            if len(rates) == 0:
                logging.error("Error: no metadata recorded when adapting bitrates")
                ans = None
            else:
                available = [b for b in rates if cur_throughput >= b * 1.5]
                if len(available) == 0:
                    ans = min(rates)
                else:
                    ans = max(available)
        else:
            if len(rates) == 0:
                logging.error("Error: no metadata recorded when adapting bitrates")
                ans = None
            else:
                ans = min(rates)
        if ans:
            logging.debug("Stat: adapt bitrate for ip {}: {}".format(ip, ans))
        else:
            logging.debug("Stat: cannot choose bitrate for ip {}".format(ip))


async def parse_bitrates(xml_str):
    tree = xml.etree.ElementTree.fromstring(xml_str)
    root = tree.getroot()
    if root.tag != 'manifest':
        logging.error("Error: not a manifest file")
        return
    new_rates = []
    for child in root:
        if child.tag == 'media':
            if 'bitrate' not in child.attrib:
                logging.error("Error: no bitrate attribution")
            else:
                new_rates.append(int(child.attrib['bitrate']))
    logging.debug("Parse bitrates: waiting for writelock")
    async with rwlock.writer:
        global rates
        rates = new_rates
        logging.debug("Stat: record available bitrates: ".format(rates))


async def update_throughput(throuput, ip):
    logging.debug("Update throughput: waiting for writelock")
    async with rwlock.writer:
        if ip in throughput_map:
            throughput_map[ip] = alpha * throuput + (1 - alpha) * throughput_map[ip]
        else:
            throughput_map[ip] = throuput
        logging.debug("Stat: updaet throughput from {}: {}".format(ip, throughput_map[ip]))


addr = config['listen_addr']
port = int(config['listen_port'])
coro = asyncio.start_server(forwarding, addr, port, loop=loop)
server = loop.run_until_complete(coro)

logging.debug('Listening on {}'.format(server.sockets[0].getsockname()))

try:
    loop.run_forever()
except KeyboardInterrupt:
    pass

logging.debug('Shutdown server')
server.close()
loop.run_until_complete(server.wait_closed())
loop.close()
